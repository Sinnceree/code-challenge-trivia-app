{"version":3,"sources":["components/AnswersBox/index.tsx","components/BorderedButton/index.tsx","components/CompletedBox/index.tsx","components/QuestionBox/index.tsx","components/Quiz/index.tsx","components/WelcomeBox/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AnswersBox","handleSelectedAnswer","selectedAnswer","className","onClick","BorderedButton","text","rest","CompletedBox","questions","handlePlayAgain","useState","score","setScore","useEffect","correct","question","correct_answer","user_answer","calculateScore","length","map","dangerouslySetInnerHTML","__html","QuestionBox","currentIndex","maxQuestions","Quiz","setQuestions","currentQuestionIndex","setQuestionIndex","setSelectedAnswer","completed","setCompleted","loading","setLoading","fetchQuestions","a","fetch","questionsRaw","json","questionsData","results","Fragment","answer","alert","newQuestionsArr","WelcomeBox","setQuizStarted","App","quizStarted","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0a7bf659.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\ninterface AnswersBoxProps {\r\n  selectedAnswer: \"True\" | \"False\" | null;\r\n  handleSelectedAnswer: (answer: \"True\" | \"False\" | null) => void;\r\n}\r\n\r\nconst AnswersBox = ({ handleSelectedAnswer, selectedAnswer }: AnswersBoxProps) => {\r\n  return (\r\n    <section className=\"answer-list\">\r\n      <div className={`${selectedAnswer === \"True\" ? \"answer selected\" : \"answer\"}`} onClick={() => handleSelectedAnswer(\"True\")}>True</div>\r\n      <div className={`${selectedAnswer === \"False\" ? \"answer selected\" : \"answer\"}`} onClick={() => handleSelectedAnswer(\"False\")}>False</div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default AnswersBox;\r\n","import React from \"react\";\r\n\r\ninterface BorderedButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\r\n  text: string;\r\n}\r\n\r\nconst BorderedButton = ({ text, ...rest }: BorderedButtonProps) => {\r\n  return (\r\n    <button className=\"purple-btn\" {...rest}>{text}</button>\r\n  );\r\n}\r\n\r\nexport default BorderedButton;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { QuestionObject } from \"../../interfaces\";\r\nimport BorderedButton from \"../BorderedButton\";\r\n\r\ninterface CompletedBoxProps {\r\n  questions: QuestionObject[];\r\n  handlePlayAgain: () => void;\r\n}\r\n\r\nconst CompletedBox = ({ questions, handlePlayAgain }: CompletedBoxProps) => {\r\n  const [score, setScore] = useState<number>(0);\r\n\r\n  const calculateScore = () => {\r\n    let correct = 0;\r\n\r\n    for (const question of questions) {\r\n      if (question.correct_answer === question.user_answer) {\r\n        correct++;\r\n      }\r\n    }\r\n\r\n    setScore(correct);\r\n  }\r\n\r\n  useEffect(() => {\r\n    calculateScore();\r\n  }, []);\r\n\r\n  return (\r\n    <section className=\"completed-quiz\">\r\n      <div className=\"score\">You Scored {score}/{questions.length}</div>\r\n      <ul className=\"answers\">\r\n\r\n        {questions && questions.map((question) => (\r\n          <li className={`${question.correct_answer === question.user_answer ? \"item correct\" : \"item incorrect\" }`}>\r\n            <h1 className=\"title\" dangerouslySetInnerHTML={{__html: question.question }} />\r\n            <p className=\"answer\">{question.user_answer}</p>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <BorderedButton text=\"Play Again!\" onClick={handlePlayAgain} />\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default CompletedBox;\r\n","import React from \"react\";\r\n\r\ninterface QuestionBoxProps {\r\n  question: string;\r\n  currentIndex: number;\r\n  maxQuestions: number;\r\n}\r\n\r\nconst QuestionBox = ({ question, currentIndex, maxQuestions }: QuestionBoxProps) => {\r\n  return (\r\n    <section className=\"question\">\r\n      <div className=\"completed\">Question {currentIndex}/{maxQuestions}</div>\r\n      <h1 className=\"text\" dangerouslySetInnerHTML={{__html: question }} />\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default QuestionBox;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { QuestionObject } from \"../../interfaces\";\r\nimport AnswersBox from \"../AnswersBox\";\r\nimport BorderedButton from \"../BorderedButton\";\r\nimport CompletedBox from \"../CompletedBox\";\r\nimport QuestionBox from \"../QuestionBox\";\r\n\r\nconst Quiz = () => {\r\n  const [questions, setQuestions] = useState<QuestionObject[]>([]);\r\n  const [currentQuestionIndex, setQuestionIndex] = useState<number>(0);\r\n  const [selectedAnswer, setSelectedAnswer] = useState<\"True\" | \"False\" | null>(null);\r\n  const [completed, setCompleted] = useState<boolean>(false);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n\r\n  const fetchQuestions = async () => {\r\n    const questionsRaw = await fetch(\"https://opentdb.com/api.php?amount=10&difficulty=hard&type=boolean\");\r\n    const questionsData = await questionsRaw.json();\r\n    setQuestions(questionsData.results);\r\n    setLoading(false);\r\n\r\n  }\r\n\r\n  const handleSelectedAnswer = (answer: \"True\" | \"False\" | null) => {\r\n    setSelectedAnswer(answer)\r\n  }\r\n\r\n  const handleNextQuestion = () => {\r\n    // First let's check if the user answered this question or not.\r\n    if (!selectedAnswer) {\r\n      return alert(\"Please select a answer!\")\r\n    }\r\n\r\n    // Lets duplicate the arr temp so we can mutate it\r\n    const newQuestionsArr = questions;\r\n    newQuestionsArr[currentQuestionIndex].user_answer = selectedAnswer;\r\n    setQuestions(newQuestionsArr);\r\n\r\n    // Now lets move to next question if there is one\r\n    const newIndex = currentQuestionIndex + 1;\r\n\r\n    // If the new index is higher then the length of array do nothing\r\n    if (newIndex >= questions.length) {\r\n      return setCompleted(true)\r\n    }\r\n\r\n    setQuestionIndex(currentQuestionIndex + 1);\r\n    setSelectedAnswer(null);\r\n  }\r\n\r\n  const handlePlayAgain = () => {\r\n    // Lets reset all the game state\r\n    setLoading(true)\r\n    setSelectedAnswer(null);\r\n    setQuestions([]);\r\n    setQuestionIndex(0);\r\n    setCompleted(false);\r\n\r\n    // Now lets fetch new questions\r\n    fetchQuestions();\r\n  }\r\n\r\n  // Fetch questions on component mount.\r\n  useEffect(() => {\r\n    fetchQuestions();\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"quiz-wrapper\">\r\n      {!completed && !loading &&\r\n        <React.Fragment>\r\n          <QuestionBox question={questions[currentQuestionIndex].question} currentIndex={currentQuestionIndex + 1} maxQuestions={questions.length} />\r\n          <AnswersBox handleSelectedAnswer={handleSelectedAnswer} selectedAnswer={selectedAnswer} />\r\n          <BorderedButton text=\"Next Question\" onClick={handleNextQuestion} />\r\n        </React.Fragment>\r\n      }\r\n\r\n      {completed && !loading && <CompletedBox questions={questions} handlePlayAgain={handlePlayAgain} />}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Quiz;\r\n","import React from \"react\";\r\nimport BorderedButton from \"../BorderedButton\";\r\n\r\ninterface WelcomeBoxProps {\r\n  setQuizStarted: (bool: boolean) => void;\r\n}\r\n\r\nconst WelcomeBox = ({ setQuizStarted }: WelcomeBoxProps) => {\r\n  return (\r\n    <div className=\"start-quiz\">\r\n      <h1 className=\"title\">Welcome to Trivia Challenge!</h1>\r\n      <p className=\"desc\">You will be presented with 10 True or False questions. <br/> Do you think you can score 100%?</p>\r\n      <BorderedButton text=\"Start Quiz\" onClick={() => setQuizStarted(true)} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WelcomeBox;\r\n","import React, { useState } from \"react\";\nimport \"./assets/css/main.scss\"\nimport Quiz from \"./components/Quiz\";\nimport WelcomeBox from \"./components/WelcomeBox\";\n\nconst App = () => {\n  const [quizStarted, setQuizStarted] = useState<boolean>(false);\n\n  return (\n    <div className=\"App\">\n      {quizStarted && <Quiz /> }\n      {!quizStarted && <WelcomeBox setQuizStarted={setQuizStarted} />}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}